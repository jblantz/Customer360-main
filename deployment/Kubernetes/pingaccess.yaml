apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f Compose/docker-compose.yaml --volumes configMap
    kompose.version: 1.21.0 ()
  labels:
    io.kompose.service: pingaccess
  name: pingaccess
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: pingaccess
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f Compose/docker-compose.yaml --volumes configMap
        kompose.version: 1.21.0 ()
      labels:
        io.kompose.service: pingaccess
    spec:
      containers:
      - env:
        - name: PING_IDENTITY_ACCEPT_EULA
          valueFrom:
            configMapKeyRef:
              key: PING_IDENTITY_ACCEPT_EULA
              name: env-vars
        - name: PING_IDENTITY_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: PING_IDENTITY_PASSWORD
              name: env-vars
        - name: PA_LOG_LEVEL
          value: DEBUG
        image: pingidentity/pingaccess:latest
        imagePullPolicy: "IfNotPresent"
        name: pingaccess
        ports:
        - containerPort: 8080
        - containerPort: 3000
        - containerPort: 9000
        resources: {}
        envFrom:
          - secretRef:
              name: devops-secret
      restartPolicy: Always
      serviceAccountName: ""
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f Compose/docker-compose.yaml --volumes configMap
    kompose.version: 1.21.0 ()
  labels:
    io.kompose.service: pingaccess
  name: pingaccess
spec:
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  - name: "3000"
    port: 3000
    targetPort: 3000
  - name: "9000"
    port: 9000
    targetPort: 9000
  selector:
    io.kompose.service: pingaccess
status:
  loadBalancer: {}
